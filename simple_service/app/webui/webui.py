import streamlit as st
import requests
import logging
import time
import pandas as pd
from dotenv import load_dotenv
from pydantic_settings import BaseSettings
from auth.jwt_handler import decode_access_token


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Å—Ç—Ä–æ—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å API
API_URL = "http://app:8080"

load_dotenv()


class Settings(BaseSettings):
    SECRET_KEY: str


settings = Settings()
SECRET_KEY = settings.SECRET_KEY


def set_token(token):
    st.session_state.token = token
    st.session_state.logged_in = True


def get_token():
    token = st.session_state.get("token", None)
    if token is None:
        return None
    return str(token)


def remove_token():
    st.session_state["token"]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
def initialize_session_state():
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "–ì–ª–∞–≤–Ω–∞—è"
    if "available_pages" not in st.session_state:
        st.session_state.available_pages = {
            "–ì–ª–∞–≤–Ω–∞—è": main_page,
            "–í—Ö–æ–¥": signin_page,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": signup_page
        }
    if 'username' not in st.session_state:
        st.session_state.username = ""
    if 'user_id' not in st.session_state:
        st.session_state.user_id = None
    if 'token' not in st.session_state:
        st.session_state.token = None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å —Ç–æ–∫–µ–Ω–æ–º
def api_request(method, endpoint, data=None):
    token = get_token()
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    url = f"{API_URL}{endpoint}"

    try:
        if method == "GET":
            response = requests.get(url, headers=headers)
        elif method == "POST":
            logging.info(f"Sent data: {data}")
            response = requests.post(url, json=data, headers=headers)
        else:
            raise ValueError("Unsupported HTTP method")

        response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤ 4xx/5xx
        return response

    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            st.error("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            remove_token()
            st.session_state.logged_in = False
            st.session_state.current_page = "–í—Ö–æ–¥"
            st.rerun()
        elif e.response.status_code == 404:
            st.error("–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            time.sleep(1)
            st.session_state.logged_in = False
            st.session_state.current_page = "–í—Ö–æ–¥"
            st.rerun()
        elif e.response.status_code == 403:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            time.sleep(1)
            st.session_state.logged_in = False
            st.session_state.current_page = "–í—Ö–æ–¥"
            st.rerun()
        elif e.response.status_code == 409:
            st.error("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            time.sleep(1)
            st.session_state.logged_in = False
            st.session_state.current_page = "–í—Ö–æ–¥"
            st.rerun()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
def signin_page():
    st.title("üå± –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    email = st.text_input("Email", key="login_email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
    login_button = st.button("–í–æ–π—Ç–∏")

    if login_button:
        try:
            response = requests.post(f"{API_URL}/user/signin", data={"username": email, "password": password})
            response.raise_for_status()
            if response and response.status_code == 200:
                data = response.json()
                token = data.get("access_token")
                set_token(token)
                logging.info(f"–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {get_token()}")
                st.session_state.username = data.get("username")
                st.session_state.current_page = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
                st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logging.info(f"–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π: {st.session_state}")
                time.sleep(3)
                st.rerun()
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                st.error("–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                time.sleep(1)
                st.session_state.logged_in = False
                st.session_state.current_page = "–í—Ö–æ–¥"
                st.rerun()
            elif e.response.status_code == 403:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
                time.sleep(1)
                st.session_state.logged_in = False
                st.session_state.current_page = "–í—Ö–æ–¥"
                st.rerun()


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def signup_page():
    st.title("üå± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    email = st.text_input("Email", key="register_email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="register_password")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="register_username")
    register_button = st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    if register_button:
        response = api_request("POST", "/user/signup", {"email": email,
                                                        "password": password,
                                                        "username": username})
        if response and response.status_code == 200:
            st.session_state.current_page = "–í—Ö–æ–¥"
            st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            time.sleep(3)
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
def dashboard_page():
    st.title("üå± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    if not st.session_state.logged_in or not st.session_state.user_id:
        st.error("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.session_state.current_page = "–í—Ö–æ–¥"
        st.rerun()
        return

    st.write(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.username}!")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    response = api_request("GET", "/user/balance")
    if response and response.status_code == 200:
        balance = response.json().get("balance")
        st.write(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")
    else:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞")

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    st.subheader("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    amount = st.number_input("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö)", min_value=0)
    if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
        response = api_request(
            "POST",
            "/user/balance/replenish",
            {"amount": amount}
            )
        if response and response.status_code == 200:
            st.success("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω")
            time.sleep(1)
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

    # –ú–æ–¥–µ–ª–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    response = api_request("GET", "/service/models/")
    if response and response.status_code == 200:
        models = response.json()
        if models:
            df_models = pd.DataFrame(models)

            # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_models = df_models.rename(columns={
                "model_id": "ID –º–æ–¥–µ–ª–∏",
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
                "cost": "–°—Ç–æ–∏–º–æ—Å—Ç—å"
            })

            df_models_dspl = df_models[["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Ç–æ–∏–º–æ—Å—Ç—å"]]
            df_models_dspl["–°—Ç–æ–∏–º–æ—Å—Ç—å"] = df_models_dspl["–°—Ç–æ–∏–º–æ—Å—Ç—å"].astype(int)
            df_models_dspl = df_models_dspl.reset_index(drop=True)

            def render_html_table(df):
                html = "<table style='width:100%; border-collapse:collapse;'>"
                html += "<thead><tr>" + "".join(f"<th style='border:1px solid #ddd; padding:8px; text-align:left'>{col}</th>" for col in df.columns) + "</tr></thead>"
                html += "<tbody>"
                for _, row in df.iterrows():
                    html += "<tr>"
                    for cell in row:
                        cell_html = str(cell).replace('\n', '<br>')
                        html += "<td style='border:1px solid #ddd; padding:8px; vertical-align:top'>{}</td>".format(cell_html)
                    html += "</tr>"
                html += "</tbody></table>"
                st.markdown(html, unsafe_allow_html=True)

            # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
            render_html_table(df_models_dspl)
        else:
            st.write("–ë–∞–∑–∞ ML –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç–∞")
    else:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")

    st.subheader("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Ö–æ–¥—É")
   
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_names = df_models["–ù–∞–∑–≤–∞–Ω–∏–µ"].tolist()
    selected_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", model_names)
    model_id = int(df_models[df_models["–ù–∞–∑–≤–∞–Ω–∏–µ"] == selected_name]["ID –º–æ–¥–µ–ª–∏"].values[0])

    # –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    lat_input = st.text_input("–®–∏—Ä–æ—Ç–∞ (–æ—Ç -90 –¥–æ 90)", placeholder="–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    lon_input = st.text_input("–î–æ–ª–≥–æ—Ç–∞ (–æ—Ç -180 –¥–æ 180)", placeholder="–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ float –∏–ª–∏ None
    def parse_coord(val, min_val, max_val):
        try:
            f = float(val)
            if min_val <= f <= max_val:
                return f
            else:
                st.warning(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É {min_val} –∏ {max_val}")
                return None
        except ValueError:
            return None

    lat = parse_coord(lat_input, -90, 90) if lat_input else None
    lon = parse_coord(lon_input, -180, 180) if lon_input else None

    # –§–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è file_uploader
    if "uploader_key" not in st.session_state:
        st.session_state["uploader_key"] = "uploader_1"

    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
        type=["jpg", "jpeg", "png"], 
        key=st.session_state["uploader_key"]
    )

    # –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Äî –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if uploaded_file:
        st.session_state.pop("last_result", None)
        st.session_state["current_image_file"] = uploaded_file

    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
    if "current_image_file" in st.session_state:
        st.image(st.session_state["current_image_file"], caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=500)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if st.button("üå± –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        if "current_image_file" not in st.session_state:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            st.stop()

        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.session_state.pop("last_result", None)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            uploaded_file = st.session_state["current_image_file"]
            files = {"file": (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
            token = st.session_state.get('token')
            headers = {"Authorization": f"Bearer {token}"}

            response = requests.post(f"{API_URL}/service/upload", files=files, headers=headers)

            if response.status_code != 201:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                st.stop()

            img_data = response.json()[0]
            image_id = img_data["image_id"]
            image_url = img_data["image_url"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.session_state["uploaded_image_url"] = image_url
            # st.image(image_url, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=300)

        # –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É..."):
            payload = {
                "model_id": model_id,
                "image_id": image_id,
                **({"latitude": lat} if lat is not None else {}),
                **({"longitude": lon} if lon is not None else {}),
            }

            post = api_request("POST", "/service/prediction", payload)

            if not post or post.status_code != 202:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
                st.stop()

            task_id = post.json().get("task_id")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
            for _ in range(30):
                time.sleep(1)
                status = api_request("GET", f"/service/tasks/{task_id}")
                if status and status.status_code == 200:
                    items = status.json()
                    if any(item.get("status") == "complete" for item in items):
                        break
            else:
                st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                st.stop()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        get_preds = api_request("GET", "/user/predictions")
        if not get_preds or get_preds.status_code != 200:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            st.stop()

        preds = get_preds.json()
        rec = next((p for p in reversed(preds) if p.get("prediction_id") == task_id), None)
        if not rec and preds:
            rec = preds[-1]

        if rec:
            st.session_state["last_result"] = {
                "image_url": rec["input_photo_url"],
                "result": rec.get("prediction_result", "‚Äî")
            }
        else:
            st.error("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–≤–æ–¥"):
        st.session_state.pop("current_image_file", None)
        st.session_state.pop("uploaded_image_url", None)
        st.session_state.pop("last_result", None)

        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å file_uploader
        st.session_state["uploader_key"] = f"uploader_{time.time()}"
        st.experimental_rerun()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "last_result" in st.session_state:
        st.markdown("---")
        # st.image(st.session_state["last_result"]["image_url"], caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", width=300)
        st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É:** {st.session_state['last_result']['result']}")
        st.success("–ì–æ—Ç–æ–≤–æ!")

    # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")

    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"):
        response = api_request("GET", "/user/predictions")

        if response and response.status_code == 200:
            history = response.json()
            if history:
                for item in history:
                    public_url = item.get('input_photo_url', '')
                    st.write(f"–î–∞—Ç–∞: {item.get('created_at', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}, ")
                    st.write(f"–ú–æ–¥–µ–ª—å: {item.get('model_id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    st.markdown(f'<img src="{public_url}" width="200">', unsafe_allow_html=True)
                    st.write(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —à–∏—Ä–æ—Ç–∞: {item.get('latitude')}, –¥–æ–ª–≥–æ—Ç–∞: {item.get('longitude')}")
                    st.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {item.get('cost', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    st.write(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {item.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    st.write(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {item.get('prediction_result', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    st.markdown("---")
            else:
                st.write("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Å—Ç–∞")
        else:
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")

    # –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"):
        response = api_request("GET", "/user/transactions")
        if response and response.status_code == 200:
            history = response.json()
            if history:
                for item in history:
                    st.write(
                        f"–î–∞—Ç–∞: {item.get('created_at', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}, "
                        f"–¢–∏–ø: {item.get('type', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}, "
                        f"–°—É–º–º–∞: {item.get('amount', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
                             )
            else:
                st.write("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Å—Ç–∞")
        else:
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def main_page():
    st.title("üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AgriSpectra")
    st.write("""
    AgriSpectra - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–¥–∏–∏ —Ä–æ—Å—Ç–∞ –∫—É–∫—É—Ä—É–∑—ã, —Ç–∏–ø–∞ –∏ —Å—Ç–µ–ø–µ–Ω–∏ –µ—ë –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è.
    –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–≤ —É—Å–ª–æ–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞—Ö)
    - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

    –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–µ—Ä–≤–∏—Å–∞.
    """)


# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    initialize_session_state()

    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")

    token = get_token()

    if token:
        try:
            decoded_token = decode_access_token(token)
            if decoded_token:
                st.session_state.logged_in = True
                st.session_state.user_id = decoded_token.get("user_id")
                st.sidebar.write(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state.username}!")
            else:
                raise ValueError("Invalid token")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            st.session_state.logged_in = False
            remove_token()
    else:
        st.session_state.logged_in = False

    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {st.session_state}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—Ö–æ–¥–∞
    if st.session_state.logged_in:
        st.session_state.available_pages = {
            "–ì–ª–∞–≤–Ω–∞—è": main_page,
            "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç": dashboard_page,
        }
    else:
        st.session_state.available_pages = {
            "–ì–ª–∞–≤–Ω–∞—è": main_page,
            "–í—Ö–æ–¥": signin_page,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": signup_page
        }

    if st.session_state.logged_in and st.sidebar.button("–í—ã–π—Ç–∏", key="logout_button"):
        remove_token()
        st.session_state.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º session_state
        st.session_state.logged_in = False  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –æ–Ω —è–≤–Ω–æ –æ—Å—Ç–∞–ª—Å—è
        st.session_state.available_pages = {  
            "–ì–ª–∞–≤–Ω–∞—è": main_page,
            "–í—Ö–æ–¥": signin_page,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": signup_page
        }
        st.session_state.current_page = "–ì–ª–∞–≤–Ω–∞—è"
        st.rerun()

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    page_names = list(st.session_state.available_pages.keys())
    selected_page = st.sidebar.radio("–ü–µ—Ä–µ–π—Ç–∏ –∫", page_names, key="navigation")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if selected_page != st.session_state.current_page:
        st.session_state.current_page = selected_page
        st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if st.session_state.current_page in st.session_state.available_pages:
        st.session_state.available_pages[st.session_state.current_page]()
    else:
        st.error(f"–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ '{st.session_state.current_page}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        main_page()


if __name__ == "__main__":
    main()
