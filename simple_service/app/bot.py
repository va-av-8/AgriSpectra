import telebot
import json
from telebot import types

from models.user import Users
from models.request import PredictItem
from services.crud import user as UserService
from services.crud import service as PredService
from database.database import get_session, init_db


with open('config.json') as f:
    config = json.load(f)

token = config["telegram_token"]
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    '''
    Display the commands and what are they intended for.
    '''
    bot.reply_to(message, build_help_message())
    markup = types.ReplyKeyboardMarkup()
    item_signup = types.KeyboardButton('/signup')
    item_signin = types.KeyboardButton('/signin')
    item_balance = types.KeyboardButton('/balance')
    item_replenish = types.KeyboardButton('/top-up')
    item_transactions = types.KeyboardButton('/transactions')
    item_prediction = types.KeyboardButton('/predict')
    item_pred_hist = types.KeyboardButton('/predictions')
    markup.row(item_signup, item_signin)
    markup.row(item_balance, item_replenish, item_transactions)
    markup.row(item_prediction, item_pred_hist)
    bot.send_message(message.chat.id, "\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \
                     –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é.",
                     reply_markup=markup)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['signup'])
def signup(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    bot.register_next_step_handler(message, get_email)


def get_email(message):
    email = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(message, lambda msg: get_username(msg, email))


def get_username(message, email):
    username = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: save_user(msg, email, username))


def save_user(message, email, username):
    password = message.text
    session = next(get_session())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ email –≤ –±–∞–∑–µ
    existing_user = session.query(Users).filter(Users.email == email).first()
    if existing_user:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return

    new_user = Users(email=email, username=username, password=password)
    UserService.create_user(new_user, session)
    bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! ‚úÖ")


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@bot.message_handler(commands=["signin"])
def signin(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    bot.register_next_step_handler(message, check_email)


def check_email(message):
    email = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: verify_user(msg, email))


def verify_user(message, email):
    password = message.text
    session = next(get_session())

    try:
        user = UserService.authenticate(email, password, session)
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}! ‚úÖ")
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞! ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.")


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@bot.message_handler(commands=["top-up"])
def add_balance_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    bot.register_next_step_handler(message, process_balance_email)


def process_balance_email(message):
    email = message.text
    session = next(get_session())
    user = session.query(Users).filter(Users.email == email).first()
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, lambda msg: process_balance(msg, user.user_id))


def process_balance(message, user_id):
    try:
        amount = float(message.text)
        session = next(get_session())
        UserService.add_balance(user_id, amount, session)
        bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚úÖ")
    except ValueError as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
@bot.message_handler(commands=["balance"])
def check_balance_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    bot.register_next_step_handler(message, process_check_balance_email)


def process_check_balance_email(message):
    email = message.text
    session = next(get_session())
    user = session.query(Users).filter(Users.email == email).first()
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        return
    balance = UserService.check_balance(user.user_id, session)
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} üí∞")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
@bot.message_handler(commands=["predict"])
def predict_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    bot.register_next_step_handler(message, get_user_for_prediction)


def get_user_for_prediction(message):
    email = message.text
    session = next(get_session())
    user = session.query(Users).filter(Users.email == email).first()
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏:")
    bot.register_next_step_handler(message, lambda msg: get_model_id(msg, user.user_id))


def get_model_id(message, user_id):
    try:
        model_id = int(message.text)
        session = next(get_session())
        model = PredService.get_model_by_id(model_id, session)
        if not model:
            bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")
            return
        fields = list(PredictItem.__annotations__.keys())
        ask_for_input(message.chat.id, user_id, model, fields, {})
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–æ–¥–µ–ª–∏ ‚ùå")


def ask_for_input(chat_id, user_id, model, fields, data):
    if not fields:
        session = next(get_session())
        predict_item = PredictItem(**data)
        result = PredictItem.process_request(model, user_id, predict_item, session)
        if "error" in result:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {result['error']} ‚ùå")
        else:
            bot.send_message(chat_id, f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {result['predicted_quality']} ‚úÖ")
        return
    field = fields[0]
    bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
    bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: collect_input(msg, chat_id, user_id, model, fields[1:], data, field))


def collect_input(message, chat_id, user_id, model, fields, data, field):
    try:
        data[field] = float(message.text)
        ask_for_input(chat_id, user_id, model, fields, data)
    except ValueError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚ùå")
        ask_for_input(chat_id, user_id, model, [field] + fields, data)


def build_help_message():
    '''
    Helper method to build the bot help message
    '''
    return "\n \
SimpleMLServiceBot –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–Ω–∞ –ø–æ –µ–≥–æ —Å–æ—Å—Ç–∞–≤—É.\n \
\n \
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º: \n \
\n \
/signup - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \n \
/signin - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è \n \
/balance - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ \n \
/top-up - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ \n \
/transactions - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π \n \
/predict - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è \n \
/predictions - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π \n \
\n"


# init_db()
# bot.polling()

while True:
    try:
        init_db()
        bot.polling(none_stop=True)
    except:
        print("Telegram API timeout happened")
