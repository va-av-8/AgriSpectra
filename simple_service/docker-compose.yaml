version: "3"
services:
  database:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./postgres/.env
    ports:
      - "5432:5432"
    restart: on-failure

  rabbitmq:
    image: rabbitmq:3-management
    # network_mode: "host"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - ./rabbitmq/.env
    restart: on-failure
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3


  app:
    build:
      context: ./app/
    image: event-planner-api:latest
    env_file:
      - ./app/.env
    volumes:
      - ./app:/app
    # ports:
    #   - 8080:8080
    depends_on:
      - database
      - rabbitmq
      - minio
    restart: always

  worker:
    build: ./app/workers/
    # command: python worker.py
    mem_limit: 1g
    memswap_limit: 1g
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_started 
      minio:
        condition: service_started 
    volumes:
      - ./app:/app
      - wandb-cache:/root/.cache/wandb/artifacts
    env_file:
      - ./app/.env
    scale: 3 # Количество экземпляров воркеров
    restart: on-failure

  web-proxy:
    # image: nginx:latest
    build: ./nginx
    ports:
      - 80:80
      - 443:443
    # volumes:
    #   - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    restart: on-failure
  
  webui:
    build: ./app/webui/
    image: ui_1:latest
    volumes:
      - ./app:/app
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
    depends_on:
      - app

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ./minio/.env
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

volumes:
  minio_data:
  postgres_data:
  rabbitmq_data:
  wandb-cache: